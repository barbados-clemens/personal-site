# source: http://localhost:8000/___graphql
# timestamp: Sun Sep 01 2019 19:18:09 GMT-0500 (Central Daylight Time)

"""Provides default value for input field."""
directive @default(value: JSON!) on INPUT_FIELD_DEFINITION

"""Add date formating options."""
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

"""Link to node by foreign-key relation."""
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

"""Link to File node by relative path."""
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

"""Proxy resolver from another field."""
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

"""Infer field types from field values."""
directive @infer(
  """Don't add default resolvers to defined fields."""
  noDefaultResolvers: Boolean
) on OBJECT

"""Do not infer field types from field values."""
directive @dontInfer(
  """Don't add default resolvers to defined fields."""
  noDefaultResolvers: Boolean
) on OBJECT

"""Define the mime-types handled by this type."""
directive @mimeTypes(
  """The mime-types handled by this type."""
  types: [String!]! = []
) on OBJECT

"""
Define parent-child relations between types. This is used to add `child*` or
`children*` convenience fields like `childImageSharp`.
"""
directive @childOf(
  """
  A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  """
  mimeTypes: [String!]! = []

  """
  A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  """
  types: [String!]! = []

  """
  Specifies whether a parent can have multiple children of this type or not.
  """
  many: Boolean! = false
) on OBJECT

"""
Adds root query fields for an interface. All implementing types must also implement the Node interface.
"""
directive @nodeInterface on INTERFACE

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

type Directory implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  sourceInstanceName: String
  absolutePath: String
  relativePath: String
  extension: String
  size: Int
  prettySize: String
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  root: String
  dir: String
  base: String
  ext: String
  name: String
  relativeDirectory: String
  dev: Int
  mode: Int
  nlink: Int
  uid: Int
  gid: Int
  rdev: Int
  blksize: Int
  ino: Int
  blocks: Int
  atimeMs: Float
  mtimeMs: Float
  ctimeMs: Float
  birthtimeMs: Float
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

input DirectoryFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  blksize: IntQueryOperatorInput
  ino: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

type File implements Node {
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  sourceInstanceName: String
  absolutePath: String
  relativePath: String
  extension: String
  size: Int
  prettySize: String
  modifiedTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  accessTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  changeTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  root: String
  dir: String
  base: String
  ext: String
  name: String
  relativeDirectory: String
  dev: Int
  mode: Int
  nlink: Int
  uid: Int
  gid: Int
  rdev: Int
  blksize: Int
  ino: Int
  blocks: Int
  atimeMs: Float
  mtimeMs: Float
  ctimeMs: Float
  atime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  mtime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  ctime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """Copy file to static directory and return public url to it"""
  publicURL: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  childMarkdownRemark: MarkdownRemark
  childImageSharp: ImageSharp
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

enum FileFieldsEnum {
  birthtime
  birthtimeMs
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  publicURL
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  childMarkdownRemark___id
  childMarkdownRemark___frontmatter___title
  childMarkdownRemark___frontmatter___path
  childMarkdownRemark___frontmatter___description
  childMarkdownRemark___frontmatter___date
  childMarkdownRemark___frontmatter___tags
  childMarkdownRemark___frontmatter___publish
  childMarkdownRemark___excerpt
  childMarkdownRemark___rawMarkdownBody
  childMarkdownRemark___fileAbsolutePath
  childMarkdownRemark___html
  childMarkdownRemark___htmlAst
  childMarkdownRemark___excerptAst
  childMarkdownRemark___headings
  childMarkdownRemark___headings___value
  childMarkdownRemark___headings___depth
  childMarkdownRemark___timeToRead
  childMarkdownRemark___tableOfContents
  childMarkdownRemark___wordCount___paragraphs
  childMarkdownRemark___wordCount___sentences
  childMarkdownRemark___wordCount___words
  childMarkdownRemark___parent___id
  childMarkdownRemark___parent___parent___id
  childMarkdownRemark___parent___parent___children
  childMarkdownRemark___parent___children
  childMarkdownRemark___parent___children___id
  childMarkdownRemark___parent___children___children
  childMarkdownRemark___parent___internal___content
  childMarkdownRemark___parent___internal___contentDigest
  childMarkdownRemark___parent___internal___description
  childMarkdownRemark___parent___internal___fieldOwners
  childMarkdownRemark___parent___internal___ignoreType
  childMarkdownRemark___parent___internal___mediaType
  childMarkdownRemark___parent___internal___owner
  childMarkdownRemark___parent___internal___type
  childMarkdownRemark___children
  childMarkdownRemark___children___id
  childMarkdownRemark___children___parent___id
  childMarkdownRemark___children___parent___children
  childMarkdownRemark___children___children
  childMarkdownRemark___children___children___id
  childMarkdownRemark___children___children___children
  childMarkdownRemark___children___internal___content
  childMarkdownRemark___children___internal___contentDigest
  childMarkdownRemark___children___internal___description
  childMarkdownRemark___children___internal___fieldOwners
  childMarkdownRemark___children___internal___ignoreType
  childMarkdownRemark___children___internal___mediaType
  childMarkdownRemark___children___internal___owner
  childMarkdownRemark___children___internal___type
  childMarkdownRemark___internal___content
  childMarkdownRemark___internal___contentDigest
  childMarkdownRemark___internal___description
  childMarkdownRemark___internal___fieldOwners
  childMarkdownRemark___internal___ignoreType
  childMarkdownRemark___internal___mediaType
  childMarkdownRemark___internal___owner
  childMarkdownRemark___internal___type
  childImageSharp___id
  childImageSharp___fixed___base64
  childImageSharp___fixed___tracedSVG
  childImageSharp___fixed___aspectRatio
  childImageSharp___fixed___width
  childImageSharp___fixed___height
  childImageSharp___fixed___src
  childImageSharp___fixed___srcSet
  childImageSharp___fixed___srcWebp
  childImageSharp___fixed___srcSetWebp
  childImageSharp___fixed___originalName
  childImageSharp___resolutions___base64
  childImageSharp___resolutions___tracedSVG
  childImageSharp___resolutions___aspectRatio
  childImageSharp___resolutions___width
  childImageSharp___resolutions___height
  childImageSharp___resolutions___src
  childImageSharp___resolutions___srcSet
  childImageSharp___resolutions___srcWebp
  childImageSharp___resolutions___srcSetWebp
  childImageSharp___resolutions___originalName
  childImageSharp___fluid___base64
  childImageSharp___fluid___tracedSVG
  childImageSharp___fluid___aspectRatio
  childImageSharp___fluid___src
  childImageSharp___fluid___srcSet
  childImageSharp___fluid___srcWebp
  childImageSharp___fluid___srcSetWebp
  childImageSharp___fluid___sizes
  childImageSharp___fluid___originalImg
  childImageSharp___fluid___originalName
  childImageSharp___fluid___presentationWidth
  childImageSharp___fluid___presentationHeight
  childImageSharp___sizes___base64
  childImageSharp___sizes___tracedSVG
  childImageSharp___sizes___aspectRatio
  childImageSharp___sizes___src
  childImageSharp___sizes___srcSet
  childImageSharp___sizes___srcWebp
  childImageSharp___sizes___srcSetWebp
  childImageSharp___sizes___sizes
  childImageSharp___sizes___originalImg
  childImageSharp___sizes___originalName
  childImageSharp___sizes___presentationWidth
  childImageSharp___sizes___presentationHeight
  childImageSharp___original___width
  childImageSharp___original___height
  childImageSharp___original___src
  childImageSharp___resize___src
  childImageSharp___resize___tracedSVG
  childImageSharp___resize___width
  childImageSharp___resize___height
  childImageSharp___resize___aspectRatio
  childImageSharp___resize___originalName
  childImageSharp___parent___id
  childImageSharp___parent___parent___id
  childImageSharp___parent___parent___children
  childImageSharp___parent___children
  childImageSharp___parent___children___id
  childImageSharp___parent___children___children
  childImageSharp___parent___internal___content
  childImageSharp___parent___internal___contentDigest
  childImageSharp___parent___internal___description
  childImageSharp___parent___internal___fieldOwners
  childImageSharp___parent___internal___ignoreType
  childImageSharp___parent___internal___mediaType
  childImageSharp___parent___internal___owner
  childImageSharp___parent___internal___type
  childImageSharp___children
  childImageSharp___children___id
  childImageSharp___children___parent___id
  childImageSharp___children___parent___children
  childImageSharp___children___children
  childImageSharp___children___children___id
  childImageSharp___children___children___children
  childImageSharp___children___internal___content
  childImageSharp___children___internal___contentDigest
  childImageSharp___children___internal___description
  childImageSharp___children___internal___fieldOwners
  childImageSharp___children___internal___ignoreType
  childImageSharp___children___internal___mediaType
  childImageSharp___children___internal___owner
  childImageSharp___children___internal___type
  childImageSharp___internal___content
  childImageSharp___internal___contentDigest
  childImageSharp___internal___description
  childImageSharp___internal___fieldOwners
  childImageSharp___internal___ignoreType
  childImageSharp___internal___mediaType
  childImageSharp___internal___owner
  childImageSharp___internal___type
}

input FileFilterInput {
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  blksize: IntQueryOperatorInput
  ino: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  publicURL: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  childMarkdownRemark: MarkdownRemarkFilterInput
  childImageSharp: ImageSharpFilterInput
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
}

enum ImageFormat {
  NO_CHANGE
  JPG
  PNG
  WEBP
}

type ImageSharp implements Node {
  id: ID!
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  resolutions(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResolutions @deprecated(reason: "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link")
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  sizes(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpSizes @deprecated(reason: "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link")
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: ImageSharpFieldsEnum!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  id
  fixed___base64
  fixed___tracedSVG
  fixed___aspectRatio
  fixed___width
  fixed___height
  fixed___src
  fixed___srcSet
  fixed___srcWebp
  fixed___srcSetWebp
  fixed___originalName
  resolutions___base64
  resolutions___tracedSVG
  resolutions___aspectRatio
  resolutions___width
  resolutions___height
  resolutions___src
  resolutions___srcSet
  resolutions___srcWebp
  resolutions___srcSetWebp
  resolutions___originalName
  fluid___base64
  fluid___tracedSVG
  fluid___aspectRatio
  fluid___src
  fluid___srcSet
  fluid___srcWebp
  fluid___srcSetWebp
  fluid___sizes
  fluid___originalImg
  fluid___originalName
  fluid___presentationWidth
  fluid___presentationHeight
  sizes___base64
  sizes___tracedSVG
  sizes___aspectRatio
  sizes___src
  sizes___srcSet
  sizes___srcWebp
  sizes___srcSetWebp
  sizes___sizes
  sizes___originalImg
  sizes___originalName
  sizes___presentationWidth
  sizes___presentationHeight
  original___width
  original___height
  original___src
  resize___src
  resize___tracedSVG
  resize___width
  resize___height
  resize___aspectRatio
  resize___originalName
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input ImageSharpFilterInput {
  id: StringQueryOperatorInput
  fixed: ImageSharpFixedFilterInput
  resolutions: ImageSharpResolutionsFilterInput
  fluid: ImageSharpFluidFilterInput
  sizes: ImageSharpSizesFilterInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

type ImageSharpResolutions {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

input ImageSharpResolutionsFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

type ImageSharpSizes {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

input ImageSharpSizesFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownHeading {
  value: String
  depth: Int
}

input MarkdownHeadingFilterInput {
  value: StringQueryOperatorInput
  depth: IntQueryOperatorInput
}

input MarkdownHeadingFilterListInput {
  elemMatch: MarkdownHeadingFilterInput
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

type MarkdownRemark implements Node {
  id: ID!
  frontmatter: MarkdownRemarkFrontmatter
  excerpt(pruneLength: Int = 140, truncate: Boolean = false, format: MarkdownExcerptFormats = PLAIN): String
  rawMarkdownBody: String
  fileAbsolutePath: String
  html: String
  htmlAst: JSON
  excerptAst(pruneLength: Int = 140, truncate: Boolean = false): JSON
  headings(depth: MarkdownHeadingLevels): [MarkdownHeading]
  timeToRead: Int
  tableOfContents(pathToSlugField: String = "fields.slug", maxDepth: Int, heading: String): String
  wordCount: MarkdownWordCount
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type MarkdownRemarkConnection {
  totalCount: Int!
  edges: [MarkdownRemarkEdge!]!
  nodes: [MarkdownRemark!]!
  pageInfo: PageInfo!
  distinct(field: MarkdownRemarkFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: MarkdownRemarkFieldsEnum!): [MarkdownRemarkGroupConnection!]!
}

type MarkdownRemarkEdge {
  next: MarkdownRemark
  node: MarkdownRemark!
  previous: MarkdownRemark
}

enum MarkdownRemarkFieldsEnum {
  id
  frontmatter___title
  frontmatter___path
  frontmatter___description
  frontmatter___date
  frontmatter___tags
  frontmatter___publish
  excerpt
  rawMarkdownBody
  fileAbsolutePath
  html
  htmlAst
  excerptAst
  headings
  headings___value
  headings___depth
  timeToRead
  tableOfContents
  wordCount___paragraphs
  wordCount___sentences
  wordCount___words
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

input MarkdownRemarkFilterInput {
  id: StringQueryOperatorInput
  frontmatter: MarkdownRemarkFrontmatterFilterInput
  excerpt: StringQueryOperatorInput
  rawMarkdownBody: StringQueryOperatorInput
  fileAbsolutePath: StringQueryOperatorInput
  html: StringQueryOperatorInput
  htmlAst: JSONQueryOperatorInput
  excerptAst: JSONQueryOperatorInput
  headings: MarkdownHeadingFilterListInput
  timeToRead: IntQueryOperatorInput
  tableOfContents: StringQueryOperatorInput
  wordCount: MarkdownWordCountFilterInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type MarkdownRemarkFrontmatter {
  title: String
  path: String
  description: String
  date(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  tags: [String]
  publish: Boolean
}

input MarkdownRemarkFrontmatterFilterInput {
  title: StringQueryOperatorInput
  path: StringQueryOperatorInput
  description: StringQueryOperatorInput
  date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  publish: BooleanQueryOperatorInput
}

type MarkdownRemarkGroupConnection {
  totalCount: Int!
  edges: [MarkdownRemarkEdge!]!
  nodes: [MarkdownRemark!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input MarkdownRemarkSortInput {
  fields: [MarkdownRemarkFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

input MarkdownWordCountFilterInput {
  paragraphs: IntQueryOperatorInput
  sentences: IntQueryOperatorInput
  words: IntQueryOperatorInput
}

"""Node Interface"""
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

type Query {
  file(birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, blksize: IntQueryOperatorInput, ino: IntQueryOperatorInput, blocks: IntQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, publicURL: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, childMarkdownRemark: MarkdownRemarkFilterInput, childImageSharp: ImageSharpFilterInput): File
  allFile(filter: FileFilterInput, sort: FileSortInput, skip: Int, limit: Int): FileConnection!
  imageSharp(id: StringQueryOperatorInput, fixed: ImageSharpFixedFilterInput, resolutions: ImageSharpResolutionsFilterInput, fluid: ImageSharpFluidFilterInput, sizes: ImageSharpSizesFilterInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: ImageSharpSortInput, skip: Int, limit: Int): ImageSharpConnection!
  markdownRemark(id: StringQueryOperatorInput, frontmatter: MarkdownRemarkFrontmatterFilterInput, excerpt: StringQueryOperatorInput, rawMarkdownBody: StringQueryOperatorInput, fileAbsolutePath: StringQueryOperatorInput, html: StringQueryOperatorInput, htmlAst: JSONQueryOperatorInput, excerptAst: JSONQueryOperatorInput, headings: MarkdownHeadingFilterListInput, timeToRead: IntQueryOperatorInput, tableOfContents: StringQueryOperatorInput, wordCount: MarkdownWordCountFilterInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): MarkdownRemark
  allMarkdownRemark(filter: MarkdownRemarkFilterInput, sort: MarkdownRemarkSortInput, skip: Int, limit: Int): MarkdownRemarkConnection!
  sitePage(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, path: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput, componentPath: StringQueryOperatorInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: SitePageSortInput, skip: Int, limit: Int): SitePageConnection!
  sitePlugin(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: SitePluginSortInput, skip: Int, limit: Int): SitePluginConnection!
  site(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, siteMetadata: SiteSiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, pathPrefix: StringQueryOperatorInput, buildTime: DateQueryOperatorInput): Site
  allSite(filter: SiteFilterInput, sort: SiteSortInput, skip: Int, limit: Int): SiteConnection!
  directory(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, blksize: IntQueryOperatorInput, ino: IntQueryOperatorInput, blocks: IntQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: DirectorySortInput, skip: Int, limit: Int): DirectoryConnection!
}

type Site implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  buildTime(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  siteMetadata___title
  siteMetadata___description
  siteMetadata___author
  siteMetadata___social
  siteMetadata___social___link
  siteMetadata___social___title
  port
  host
  polyfill
  pathPrefix
  buildTime
}

input SiteFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  siteMetadata: SiteSiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  buildTime: DateQueryOperatorInput
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type SitePage implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  path: String
  internalComponentName: String
  component: String
  componentChunkName: String
  isCreatedByStatefulCreatePages: Boolean
  pluginCreator: SitePlugin
  pluginCreatorId: String
  componentPath: String
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  path
  internalComponentName
  component
  componentChunkName
  isCreatedByStatefulCreatePages
  pluginCreator___id
  pluginCreator___parent___id
  pluginCreator___parent___parent___id
  pluginCreator___parent___parent___children
  pluginCreator___parent___children
  pluginCreator___parent___children___id
  pluginCreator___parent___children___children
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___children
  pluginCreator___children___id
  pluginCreator___children___parent___id
  pluginCreator___children___parent___children
  pluginCreator___children___children
  pluginCreator___children___children___id
  pluginCreator___children___children___children
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___resolve
  pluginCreator___name
  pluginCreator___version
  pluginCreator___pluginOptions___plugins
  pluginCreator___pluginOptions___plugins___resolve
  pluginCreator___pluginOptions___plugins___id
  pluginCreator___pluginOptions___plugins___name
  pluginCreator___pluginOptions___plugins___version
  pluginCreator___pluginOptions___plugins___browserAPIs
  pluginCreator___pluginOptions___plugins___ssrAPIs
  pluginCreator___pluginOptions___plugins___pluginFilepath
  pluginCreator___pluginOptions___path
  pluginCreator___pluginOptions___name
  pluginCreator___pluginOptions___showLineNumbers
  pluginCreator___pluginOptions___inlineCodeMarker
  pluginCreator___pluginOptions___target
  pluginCreator___pluginOptions___rel
  pluginCreator___pluginOptions___className
  pluginCreator___pluginOptions___icon
  pluginCreator___pluginOptions___maxWidth
  pluginCreator___pluginOptions___showCaptions
  pluginCreator___pluginOptions___wrapperStyle
  pluginCreator___pluginOptions___destinationDir
  pluginCreator___pluginOptions___appId
  pluginCreator___pluginOptions___apiKey
  pluginCreator___pluginOptions___queries
  pluginCreator___pluginOptions___queries___query
  pluginCreator___pluginOptions___queries___indexName
  pluginCreator___pluginOptions___chunkSize
  pluginCreator___pluginOptions___short_name
  pluginCreator___pluginOptions___start_url
  pluginCreator___pluginOptions___background_color
  pluginCreator___pluginOptions___theme_color
  pluginCreator___pluginOptions___display
  pluginCreator___pluginOptions___pathCheck
  pluginCreator___nodeAPIs
  pluginCreator___browserAPIs
  pluginCreator___ssrAPIs
  pluginCreator___pluginFilepath
  pluginCreator___packageJson___name
  pluginCreator___packageJson___description
  pluginCreator___packageJson___version
  pluginCreator___packageJson___main
  pluginCreator___packageJson___license
  pluginCreator___packageJson___dependencies
  pluginCreator___packageJson___dependencies___name
  pluginCreator___packageJson___dependencies___version
  pluginCreator___packageJson___devDependencies
  pluginCreator___packageJson___devDependencies___name
  pluginCreator___packageJson___devDependencies___version
  pluginCreator___packageJson___peerDependencies
  pluginCreator___packageJson___peerDependencies___name
  pluginCreator___packageJson___peerDependencies___version
  pluginCreator___packageJson___keywords
  pluginCreatorId
  componentPath
}

input SitePageFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  path: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  pluginCreatorId: StringQueryOperatorInput
  componentPath: StringQueryOperatorInput
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePlugin implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  resolve: String
  name: String
  version: String
  pluginOptions: SitePluginPluginOptions
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  packageJson: SitePluginPackageJson
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  resolve
  name
  version
  pluginOptions___plugins
  pluginOptions___plugins___resolve
  pluginOptions___plugins___id
  pluginOptions___plugins___name
  pluginOptions___plugins___version
  pluginOptions___plugins___pluginOptions___showLineNumbers
  pluginOptions___plugins___pluginOptions___inlineCodeMarker
  pluginOptions___plugins___pluginOptions___target
  pluginOptions___plugins___pluginOptions___rel
  pluginOptions___plugins___pluginOptions___className
  pluginOptions___plugins___pluginOptions___icon
  pluginOptions___plugins___pluginOptions___name
  pluginOptions___plugins___pluginOptions___maxWidth
  pluginOptions___plugins___pluginOptions___showCaptions
  pluginOptions___plugins___pluginOptions___wrapperStyle
  pluginOptions___plugins___pluginOptions___destinationDir
  pluginOptions___plugins___browserAPIs
  pluginOptions___plugins___ssrAPIs
  pluginOptions___plugins___pluginFilepath
  pluginOptions___path
  pluginOptions___name
  pluginOptions___showLineNumbers
  pluginOptions___inlineCodeMarker
  pluginOptions___target
  pluginOptions___rel
  pluginOptions___className
  pluginOptions___icon
  pluginOptions___maxWidth
  pluginOptions___showCaptions
  pluginOptions___wrapperStyle
  pluginOptions___destinationDir
  pluginOptions___appId
  pluginOptions___apiKey
  pluginOptions___queries
  pluginOptions___queries___query
  pluginOptions___queries___indexName
  pluginOptions___queries___settings___attributesToSnippet
  pluginOptions___chunkSize
  pluginOptions___short_name
  pluginOptions___start_url
  pluginOptions___background_color
  pluginOptions___theme_color
  pluginOptions___display
  pluginOptions___pathCheck
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___license
  packageJson___dependencies
  packageJson___dependencies___name
  packageJson___dependencies___version
  packageJson___devDependencies
  packageJson___devDependencies___name
  packageJson___devDependencies___version
  packageJson___peerDependencies
  packageJson___peerDependencies___name
  packageJson___peerDependencies___version
  packageJson___keywords
}

input SitePluginFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  pluginOptions: SitePluginPluginOptionsFilterInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  packageJson: SitePluginPackageJsonFilterInput
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type SitePluginPackageJson {
  name: String
  description: String
  version: String
  main: String
  license: String
  dependencies: [SitePluginPackageJsonDependencies]
  devDependencies: [SitePluginPackageJsonDevDependencies]
  peerDependencies: [SitePluginPackageJsonPeerDependencies]
  keywords: [String]
}

type SitePluginPackageJsonDependencies {
  name: String
  version: String
}

input SitePluginPackageJsonDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

type SitePluginPackageJsonDevDependencies {
  name: String
  version: String
}

input SitePluginPackageJsonDevDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonFilterInput {
  name: StringQueryOperatorInput
  description: StringQueryOperatorInput
  version: StringQueryOperatorInput
  main: StringQueryOperatorInput
  license: StringQueryOperatorInput
  dependencies: SitePluginPackageJsonDependenciesFilterListInput
  devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
  peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
  keywords: StringQueryOperatorInput
}

type SitePluginPackageJsonPeerDependencies {
  name: String
  version: String
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

type SitePluginPluginOptions {
  plugins: [SitePluginPluginOptionsPlugins]
  path: String
  name: String
  showLineNumbers: Boolean
  inlineCodeMarker: String
  target: String
  rel: String
  className: String
  icon: String
  maxWidth: Int
  showCaptions: Boolean
  wrapperStyle: String
  destinationDir: String
  appId: String
  apiKey: String
  queries: [SitePluginPluginOptionsQueries]
  chunkSize: Int
  short_name: String
  start_url: String
  background_color: String
  theme_color: String
  display: String
  pathCheck: Boolean
}

input SitePluginPluginOptionsFilterInput {
  plugins: SitePluginPluginOptionsPluginsFilterListInput
  path: StringQueryOperatorInput
  name: StringQueryOperatorInput
  showLineNumbers: BooleanQueryOperatorInput
  inlineCodeMarker: StringQueryOperatorInput
  target: StringQueryOperatorInput
  rel: StringQueryOperatorInput
  className: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  maxWidth: IntQueryOperatorInput
  showCaptions: BooleanQueryOperatorInput
  wrapperStyle: StringQueryOperatorInput
  destinationDir: StringQueryOperatorInput
  appId: StringQueryOperatorInput
  apiKey: StringQueryOperatorInput
  queries: SitePluginPluginOptionsQueriesFilterListInput
  chunkSize: IntQueryOperatorInput
  short_name: StringQueryOperatorInput
  start_url: StringQueryOperatorInput
  background_color: StringQueryOperatorInput
  theme_color: StringQueryOperatorInput
  display: StringQueryOperatorInput
  pathCheck: BooleanQueryOperatorInput
}

type SitePluginPluginOptionsPlugins {
  resolve: String
  id: String
  name: String
  version: String
  pluginOptions: SitePluginPluginOptionsPluginsPluginOptions
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
}

input SitePluginPluginOptionsPluginsFilterInput {
  resolve: StringQueryOperatorInput
  id: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  pluginOptions: SitePluginPluginOptionsPluginsPluginOptionsFilterInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
}

input SitePluginPluginOptionsPluginsFilterListInput {
  elemMatch: SitePluginPluginOptionsPluginsFilterInput
}

type SitePluginPluginOptionsPluginsPluginOptions {
  showLineNumbers: Boolean
  inlineCodeMarker: String
  target: String
  rel: String
  className: String
  icon: String
  name: String
  maxWidth: Int
  showCaptions: Boolean
  wrapperStyle: String
  destinationDir: String
}

input SitePluginPluginOptionsPluginsPluginOptionsFilterInput {
  showLineNumbers: BooleanQueryOperatorInput
  inlineCodeMarker: StringQueryOperatorInput
  target: StringQueryOperatorInput
  rel: StringQueryOperatorInput
  className: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  name: StringQueryOperatorInput
  maxWidth: IntQueryOperatorInput
  showCaptions: BooleanQueryOperatorInput
  wrapperStyle: StringQueryOperatorInput
  destinationDir: StringQueryOperatorInput
}

type SitePluginPluginOptionsQueries {
  query: String
  indexName: String
  settings: SitePluginPluginOptionsQueriesSettings
}

input SitePluginPluginOptionsQueriesFilterInput {
  query: StringQueryOperatorInput
  indexName: StringQueryOperatorInput
  settings: SitePluginPluginOptionsQueriesSettingsFilterInput
}

input SitePluginPluginOptionsQueriesFilterListInput {
  elemMatch: SitePluginPluginOptionsQueriesFilterInput
}

type SitePluginPluginOptionsQueriesSettings {
  attributesToSnippet: [String]
}

input SitePluginPluginOptionsQueriesSettingsFilterInput {
  attributesToSnippet: StringQueryOperatorInput
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteSiteMetadata {
  title: String
  description: String
  author: String
  social: [SiteSiteMetadataSocial]
}

input SiteSiteMetadataFilterInput {
  title: StringQueryOperatorInput
  description: StringQueryOperatorInput
  author: StringQueryOperatorInput
  social: SiteSiteMetadataSocialFilterListInput
}

type SiteSiteMetadataSocial {
  link: String
  title: String
}

input SiteSiteMetadataSocialFilterInput {
  link: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

input SiteSiteMetadataSocialFilterListInput {
  elemMatch: SiteSiteMetadataSocialFilterInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}
